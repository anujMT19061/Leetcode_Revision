// Source : https://leetcode.com/explore/interview/card/top-interview-questions-easy/93/linked-list/771/
// Date   : 25-02-2021

/********************************************************************************** 
Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

Example 1:

Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:

Input: l1 = [], l2 = []
Output: []

Example 3:

Input: l1 = [], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.

**********************************************************************************/

Solution:


    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        
        if(!l2)
            return l1;
        if(!l1)
            return l2;
        
        ListNode* ans = new ListNode(0);    // dummy node to reduce checks for corner cases(initial)
        ListNode* p  = ans;
        
        while(l1 && l2)
        {
            if(l1->val < l2->val)
            {
                p->next = l1;
                l1 = l1->next;
            }
            else
            {
                p->next = l2;
                l2 = l2->next;
            }
            p = p->next;
                
        }
        if(l1)
            p->next = l1;
        if(l2)
            p->next = l2;
        
        return ans->next;
        
        
    }
    
 /********************************************************************************/ 
